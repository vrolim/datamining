# -*- coding: utf-8 -*-
"""medical_experiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c-58wqL7SQZZXfEy0jMFQnE8WI4mdjGa
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load data and store it into pandas DataFrame objects
df = pd.read_csv('preprocessingv1.csv')
df.head()

df.info()

df.describe()

df = df.drop(['Unnamed: 0'], axis=1)
df = df.dropna()
y = df['No-Show']
x = df.drop(['No-Show'],axis=1)

print(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=25)

#Treinamento sem Ajuste
'''tree = DecisionTreeClassifier(max_depth = 10)
tree.fit(x_train, y_train)'''

#Ajuste de Parâmetros Random Search
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV
tree= DecisionTreeClassifier()
params = {'criterion':['gini','entropy'],'splitter':['best','random'],'max_depth':np.random.randint(1,10,10),'min_samples_split':np.random.randint(2,10,10),'min_samples_leaf':np.random.randint(1,10,10),'random_state': np.random.randint(0,50,50)}
grid = RandomizedSearchCV(estimator=tree,scoring='accuracy',cv = 10,param_distributions=params,n_iter=100)
grid.fit(x_train, y_train)

tree_best = DecisionTreeClassifier()
params_best_tree = grid.best_params_
tree_best.set_params(**params_best_tree)
tree_best.fit(x_train, y_train)

# Visualize Decision Tree
from sklearn.tree import export_graphviz
target_names = np.unique(y)
# Creates dot file named tree.dot
export_graphviz(
            tree_best,
            out_file =  "tree.dot",
            feature_names = list(x.columns),
            class_names = target_names,
            filled = True,
            rounded = True)

from subprocess import call

call(['dot', '-T', 'png', 'tree.dot', '-o', 'tree.png'])

#Melhores parâmetros
print(params_best_tree)

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report

predicted_tree =  tree_best.predict(x_test)

accuracy = accuracy_score(y_test, predicted_tree)
accuracy

cm = confusion_matrix(y_test, predicted_tree)
sns.heatmap(cm, center=True)
plt.show()

report = classification_report(y_test, predicted_tree)
print(report)